.Dd February 9, 2023
.Dt RSA 6
.Os
.Sh NAME
.Nm genrsa ,
.Nm pubout ,
.Nm asn1parse ,
.Nm cksum ,
.Nm sign ,
.Nm verify
.Nd RSA utilities
.Sh SYNOPSIS
.Nm genrsa
.Op Ar nbits
.Ar >rsa.key
.Nm pubout
.Ar <rsa.key
.Ar >rsa.pub
.Nm asn1parse
.Ar <key
.Pp
.Nm cksum
.Ar <file
.Ar >digest
.Pp
.Nm sign
.Ar key
.Ar file
.Ar >sigfile
.Nm verify
.Ar key
.Ar file
.Ar <sigfile
.Sh DESCRIPTION
The
.Nm genrsa
utility generates an RSA private key,
which essentially involves the generation of two prime numbers.
The generated private key, along with other information,
is written into the standard output and encoded into PEM + ASN.1 format,
containing the following data:
.Bl -bullet -compact
.It
The version (hardcoded to
.Qq "0" ) .
.It
The composite modulus, N.
.It
The public value, e.
.It
The private value, d.
.It
The private value, d.
.It
The first prime factor of N, p.
.It
The second prime factor of N, p.
.It
The first exponent, d % (p - 1).
.It
The second exponent, d % (q - 1).
.It
The coefficient, q^-1 mod p.
.El
.Pp
The
.Nm pubout
utility extracts the public key (N and e) out of the private key.
The extracted public key is written into standard output.
The private key is read from standard input.
.Pp
The
.Nm asn1parse
utility parses a private or public key created with the
.Nm genrsa
or
.Nm pubout
utilities.
.Pp
The
.Nm cksum
utility hashes the contents read from standard input into a digest using the
SHA256 algorithm for cryptographic hash function.
The processed digest is written into standard output.
.Pp
The
.Nm sign
utility signs the file
.Ar file
using the key
.Ar key
into a signature,
which consists of the RSA+OAEP encryption of the SHA256 hash of the contents of the given file.
The signature is written into standard output.
.Pp
The
.Nm verify
utility verifies the authenticity of
.Ar file
by verifying its signature with the given
.Ar key.
The verification is done by comparing whether the SHA256 hash of the contents of the given file
is equal to the RSA+OAEP decryption of the given signature.
The signature is read from standard input.
.Sh EXAMPLES
Generate a 1024-bit private key into
.Pa "key"
and extract the public key into
.Pa "key.pub" :
.Bd -literal -offset indent
$ genrsa 1024 | tee rsa1024.key | pubout >rsa1024.pub
.Ed
.Pp
Check the structure of a previously-generated 1024-bit private key:
.Bd -literal -offset indent
$ asn1parse <rsa1024.key
.Ed
.Pp
Create a signature for a given file using a previously-generated 1024-bit private key:
.Bd -literal -offset indent
$ sign rsa1024.key archive.zip > archive.sig
.Ed
.Pp
Verify the signature of a given file using a previously-generated 1024-bit private key:
.Bd -literal -offset indent
$ verify rsa1024.key archive.zip < archive.sig
.Ed
.Sh SEE ALSO
.Xr openssl 1
.Pp
The following books were used during the development of these utilities:
.Rs
.%A Jonathan Katz
.%A Yehuda Lindell
.%B "Introduction to Modern Cryptography"
.%I CRC Press
.%D 2021
.Re
.Rs
.%A Donald E. Knuth
.%B The Art of Computer Programming
.%V 2
.%I Addison Wesley Longman
.%D 1998
.Re
.Sh IMPLEMENTATION
RSA is a cipher scheme that uses an asymmetric key pair
(one private, and the other public) associated to a given bit length (at least 1024),
and generated after two random prime numbers (whose product has the given bit length).
The security of RSA is based on the problem of factoring large numbers.
.Pp
Prime number generation is, perhaps, the slowest factor on the key generation,
for it consists of generating random numbers and checking for their primality.
The primality test is performed using the Miller-Rabin test.
.Pp
The RSA cipher system, however, is deterministic and subject to Chosen-Plaintext Attacks.
OAEP is a padding scheme used with RSA to add randomness to RSA's deterministic encryption.
.Sh HISTORY
These RSA utilities are the product of a project for 2022 2nd semester's course
of Cyber Security of the Computer Science department
of the University of Brasilia, Brazil.
.Sh BUGS
The
.Ic "bignum.o"
module was written from scratch and is probably buggy;
i should have used an already existant arbitrary-precision arithmetic library.
.Pp
Generating keys can take long time,
especially for 1024 bits or more.
